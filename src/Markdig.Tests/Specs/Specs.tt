<#/*
Copyright (c) Alexandre Mutel. All rights reserved.
This file is licensed under the BSD-Clause 2 license. 
See the license.txt file in the project root for more information.The MIT License (MIT)

This is a modified version of code released previously with the following license:
--------------------------

Copyright (c) 2014 Morten Houston Ludvigsen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ output extension=".cs" encoding="utf-8"#>
<#
    var specFiles = new KeyValuePair<string, string>[] {
		new KeyValuePair<string, string>("https://raw.githubusercontent.com/jgm/CommonMark/4ec06917c3a3632be4a935ffa0973092bd2621be/spec.txt", string.Empty), // 0.28
		new KeyValuePair<string, string>(Host.ResolvePath("PipeTableSpecs.md"), "pipetables|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("FootnotesSpecs.md"), "footnotes|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("GenericAttributesSpecs.md"), "attributes|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("EmphasisExtraSpecs.md"), "emphasisextras|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("HardlineBreakSpecs.md"), "hardlinebreak|advanced+hardlinebreak"),
		new KeyValuePair<string, string>(Host.ResolvePath("GridTableSpecs.md"), "gridtables|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("CustomContainerSpecs.md"), "customcontainers+attributes|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("DefinitionListSpecs.md"), "definitionlists+attributes|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("EmojiSpecs.md"), "emojis|advanced+emojis"),
		new KeyValuePair<string, string>(Host.ResolvePath("AbbreviationSpecs.md"), "abbreviations|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("ListExtraSpecs.md"), "listextras|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("FigureFooterAndCiteSpecs.md"), "figures+footers+citations|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("MathSpecs.md"), "mathematics|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("BootstrapSpecs.md"), "bootstrap+pipetables+figures+attributes"),
		new KeyValuePair<string, string>(Host.ResolvePath("MediaSpecs.md"), "medialinks|advanced+medialinks"),
		new KeyValuePair<string, string>(Host.ResolvePath("SmartyPantsSpecs.md"), "pipetables+smartypants|advanced+smartypants"),   // Check with smartypants to make sure that it doesn't break pipetables
		new KeyValuePair<string, string>(Host.ResolvePath("AutoIdentifierSpecs.md"), "autoidentifiers|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("TaskListSpecs.md"), "tasklists|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("DiagramsSpecs.md"), "diagrams|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("NoHtmlSpecs.md"), "nohtml"),
		new KeyValuePair<string, string>(Host.ResolvePath("YamlSpecs.md"), "yaml"),
		new KeyValuePair<string, string>(Host.ResolvePath("AutoLinks.md"), "autolinks|advanced"),
		new KeyValuePair<string, string>(Host.ResolvePath("JiraLinks.md"), "jiralinks"),
	};
    var emptyLines = false;
    var displayEmptyLines = false;
#>
using System;
using NUnit.Framework;

namespace Markdig.Tests
{
<#
foreach (var specFileItem in specFiles)
{
	var specFile = specFileItem.Key;
foreach (var item in ReadSpecs(specFile))
{
    if (item is string)
    {
        var line = (string)item;
        if (line == "")
        {
            emptyLines = true;
        }
        else
        {
            if (emptyLines && displayEmptyLines)
            {
#>
        //
<#
            }
#>
        // <#= line #>
<#
            displayEmptyLines = true;
            emptyLines = false;
        }
    }
    if (item is Spec)
    {
        var spec = (Spec)item;
        emptyLines = false;
        displayEmptyLines = false;
#>
    [TestFixture]
    public partial class Test<#= spec.SecHeadingCompact #>
    {
        [Test]
        public void <#= spec.Name #>()
        {
            // Example <#= spec.Example #>
            // Section: <#= spec.SecHeading #>
            //
            // The following CommonMark:
<#= string.Join(Environment.NewLine, spec.CommonMark.Split('\n').Select(s => string.Format("            //     {0}", s))) #>
            //
            // Should be rendered as:
<#= string.Join(Environment.NewLine, spec.Html.Split('\n').Select(s => string.Format("            //     {0}", s))) #>

            Console.WriteLine("Example {0}" + Environment.NewLine + "Section: {0}" + Environment.NewLine, <#= spec.Example #>, "<#= Escape(spec.SecHeading) #>");
			TestParser.TestSpec("<#= Escape(spec.CommonMark) #>", "<#= Escape(spec.Html) #>", "<#= Escape(specFileItem.Value) #>");
        }
    }
<#
    }
}
}
#>
}
<#+
private class Item
{
}

private class Spec
{
    public int Example { get; set; }
    public int Number { get; set; }
    public string SecHeading { get; set; }
	public string SecHeadingCompact {get; set;}
    public string SectionId { get; set; }
    public string CommonMark { get; set; }
    public string Html { get; set; }

    public string Name
    {
        get { return string.Format("Example{0:000}", Example); }
    }
}

private bool Match(string value, string pattern, out string[] groups)
{
    var match = Regex.Match(value, pattern);
    if (match.Success)
    {
        groups = match.Groups.Cast<Group>().Select(g => g.Value).ToArray();
        return true;
    }
    groups = new string[] { };
    return false;
}

private string GetSectionId(IEnumerable<string> sectionHeadings)
{
    var name = string.Join("", sectionHeadings.Select(s => CultureInfo.InvariantCulture.TextInfo.ToTitleCase(s)));
    name = Regex.Replace(name, @"\s+", "");
    return name;
}

private IEnumerable<object> ReadSpecs(string fileName)
{
    var stage = 0;
    var commonMark = "";
    var html = "";
    var example = 0;
    var lineNum = 0;
    var exampleLine = 0;
    var sectionNums = new List<int>();
    var sectionHeadings = new Stack<string>();
    var sectionHeading = "";
    var groups = new string[] { };
    var line = "";
    var sectionSpecNumbers = new Dictionary<string, int>();
    var endOfTests = false;

	string content;
	if (fileName.StartsWith("http"))
	{
		using (var client = new System.Net.WebClient() { Encoding = Encoding.UTF8 })
			content = client.DownloadString(fileName);
	}
	else
	{
		content = File.ReadAllText(fileName);
	}

    using (var reader = new StringReader(content))
    {
        while (!endOfTests && (line = reader.ReadLine()) != null)
        {
            lineNum += 1;

			if (stage == 0 && line == "```````````````````````````````` example")
			{
				stage = 1; // parse markdown
				exampleLine = lineNum;
			}
			else if (stage == 1 && line == ".")
			{
				stage = 2;
			}
			else if (stage == 2 && line == "````````````````````````````````")
			{
				stage = 0;

                var sectionId = GetSectionId(sectionHeadings.Reverse());
                if (sectionSpecNumbers.ContainsKey(sectionId))
                {
                    sectionSpecNumbers[sectionId] += 1;
                }
                else
                {
                    sectionSpecNumbers[sectionId] = 1;
                }

				var heading = string.Join(" ", sectionHeadings.Reverse()).Replace("\\","\\\\");
				var headingCompact = Regex.Replace(heading, "[^A-Za-z0-9]+", string.Empty);
                example++;
                yield return new Spec
                {
                    Example = example,
                    Number = sectionSpecNumbers[sectionId],
                    SecHeading = heading,
					SecHeadingCompact = headingCompact,
                    SectionId = sectionId,
                    CommonMark = commonMark,
                    Html = html
                };
                commonMark = "";
                html = "";
            }
			else if (stage == 0 && line == "<!-- END TESTS -->")
			{
				endOfTests = true;
			}
			else if (stage == 0 && Match(line, "^(#+) +(.*)", out groups))
            {
                var sectionLevel = groups[1].Length;
                sectionHeading = groups[2];

                while (sectionHeadings.Count() < sectionLevel)
                {
                    sectionHeadings.Push("");
                }
                while (sectionHeadings.Count() >= sectionLevel)
                {
                    sectionHeadings.Pop();
                }
                sectionHeadings.Push(sectionHeading);

                if (sectionNums.Count > 0 && sectionNums.Count == sectionLevel - 1)
                {
                    sectionNums[sectionNums.Count - 1]++;
                }
                else if (sectionNums.Count > sectionLevel - 1)
                {
                    sectionNums = Enumerable.Range(0, sectionLevel).ToList();
                    sectionNums[sectionNums.Count - 1]++;
                }
                else
                {
                    while (sectionNums.Count < sectionLevel - 1)
                    {
                        sectionNums.Add(1);
                    }
                }

                yield return line.Trim();
            }
            else if (stage == 1)
            {
                if (commonMark.Length > 0)
                {
                    commonMark += '\n';
                }
                commonMark += line;
            }
            else if (stage == 2)
            {
                if (html.Length > 0)
                {
                    html += '\n';
                }
                html += line;
            }
            else
            {
                yield return line.Trim();
            }
        }
        while ((line = reader.ReadLine()) != null)
        {
            yield return line.Trim();
        }
    }
}

private static string Escape(string input)
{
    return input
		.Replace("→", "\t")
        .Replace("\\", "\\\\")
        .Replace("\"", "\\\"")
        .Replace("\0", "\\0")
        .Replace("\a", "\\a")
        .Replace("\b", "\\b")
        .Replace("\f", "\\f")
        .Replace("\n", "\\n")
        .Replace("\r", "\\r")
        .Replace("\t", "\\t")
        .Replace("\v", "\\v")
        ;
}

private static string ToLiteral(string input)
{
    using (var writer = new StringWriter())
    {
        using (var provider = CodeDomProvider.CreateProvider("CSharp"))
        {
            provider.GenerateCodeFromExpression(new CodePrimitiveExpression(input), writer, null);
            return writer.ToString();
        }
    }
}
#>